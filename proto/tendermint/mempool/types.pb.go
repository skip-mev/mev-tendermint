// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/mempool/types.proto

package mempool

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Txs struct {
	Txs [][]byte `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (m *Txs) Reset()         { *m = Txs{} }
func (m *Txs) String() string { return proto.CompactTextString(m) }
func (*Txs) ProtoMessage()    {}
func (*Txs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2af51926fdbcbc05, []int{0}
}
func (m *Txs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Txs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Txs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Txs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Txs.Merge(m, src)
}
func (m *Txs) XXX_Size() int {
	return m.Size()
}
func (m *Txs) XXX_DiscardUnknown() {
	xxx_messageInfo_Txs.DiscardUnknown(m)
}

var xxx_messageInfo_Txs proto.InternalMessageInfo

func (m *Txs) GetTxs() [][]byte {
	if m != nil {
		return m.Txs
	}
	return nil
}

type Message struct {
	// Types that are valid to be assigned to Sum:
	//	*Message_Txs
	//	*Message_MevTxs
	Sum isMessage_Sum `protobuf_oneof:"sum"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_2af51926fdbcbc05, []int{1}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Sum interface {
	isMessage_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_Txs struct {
	Txs *Txs `protobuf:"bytes,1,opt,name=txs,proto3,oneof" json:"txs,omitempty"`
}
type Message_MevTxs struct {
	MevTxs *MEVTxs `protobuf:"bytes,2,opt,name=mev_txs,json=mevTxs,proto3,oneof" json:"mev_txs,omitempty"`
}

func (*Message_Txs) isMessage_Sum()    {}
func (*Message_MevTxs) isMessage_Sum() {}

func (m *Message) GetSum() isMessage_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Message) GetTxs() *Txs {
	if x, ok := m.GetSum().(*Message_Txs); ok {
		return x.Txs
	}
	return nil
}

func (m *Message) GetMevTxs() *MEVTxs {
	if x, ok := m.GetSum().(*Message_MevTxs); ok {
		return x.MevTxs
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_Txs)(nil),
		(*Message_MevTxs)(nil),
	}
}

type MEVMessage struct {
	// Types that are valid to be assigned to Sum:
	//	*MEVMessage_Txs
	Sum           isMEVMessage_Sum `protobuf_oneof:"sum"`
	DesiredHeight int64            `protobuf:"varint,2,opt,name=desired_height,json=desiredHeight,proto3" json:"desired_height,omitempty"`
	BundleId      int64            `protobuf:"varint,3,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
	BundleOrder   int64            `protobuf:"varint,4,opt,name=bundle_order,json=bundleOrder,proto3" json:"bundle_order,omitempty"`
	BundleSize    int64            `protobuf:"varint,5,opt,name=bundle_size,json=bundleSize,proto3" json:"bundle_size,omitempty"`
	GasWanted     int64            `protobuf:"varint,6,opt,name=gas_wanted,json=gasWanted,proto3" json:"gas_wanted,omitempty"`
}

func (m *MEVMessage) Reset()         { *m = MEVMessage{} }
func (m *MEVMessage) String() string { return proto.CompactTextString(m) }
func (*MEVMessage) ProtoMessage()    {}
func (*MEVMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2af51926fdbcbc05, []int{2}
}
func (m *MEVMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MEVMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MEVMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MEVMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MEVMessage.Merge(m, src)
}
func (m *MEVMessage) XXX_Size() int {
	return m.Size()
}
func (m *MEVMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MEVMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MEVMessage proto.InternalMessageInfo

type isMEVMessage_Sum interface {
	isMEVMessage_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MEVMessage_Txs struct {
	Txs *Txs `protobuf:"bytes,1,opt,name=txs,proto3,oneof" json:"txs,omitempty"`
}

func (*MEVMessage_Txs) isMEVMessage_Sum() {}

func (m *MEVMessage) GetSum() isMEVMessage_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *MEVMessage) GetTxs() *Txs {
	if x, ok := m.GetSum().(*MEVMessage_Txs); ok {
		return x.Txs
	}
	return nil
}

func (m *MEVMessage) GetDesiredHeight() int64 {
	if m != nil {
		return m.DesiredHeight
	}
	return 0
}

func (m *MEVMessage) GetBundleId() int64 {
	if m != nil {
		return m.BundleId
	}
	return 0
}

func (m *MEVMessage) GetBundleOrder() int64 {
	if m != nil {
		return m.BundleOrder
	}
	return 0
}

func (m *MEVMessage) GetBundleSize() int64 {
	if m != nil {
		return m.BundleSize
	}
	return 0
}

func (m *MEVMessage) GetGasWanted() int64 {
	if m != nil {
		return m.GasWanted
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MEVMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MEVMessage_Txs)(nil),
	}
}

type MEVTxs struct {
	Txs           [][]byte `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	DesiredHeight int64    `protobuf:"varint,2,opt,name=desired_height,json=desiredHeight,proto3" json:"desired_height,omitempty"`
	BundleId      int64    `protobuf:"varint,3,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
	BundleOrder   int64    `protobuf:"varint,4,opt,name=bundle_order,json=bundleOrder,proto3" json:"bundle_order,omitempty"`
	BundleSize    int64    `protobuf:"varint,5,opt,name=bundle_size,json=bundleSize,proto3" json:"bundle_size,omitempty"`
	GasWanted     int64    `protobuf:"varint,6,opt,name=gas_wanted,json=gasWanted,proto3" json:"gas_wanted,omitempty"`
}

func (m *MEVTxs) Reset()         { *m = MEVTxs{} }
func (m *MEVTxs) String() string { return proto.CompactTextString(m) }
func (*MEVTxs) ProtoMessage()    {}
func (*MEVTxs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2af51926fdbcbc05, []int{3}
}
func (m *MEVTxs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MEVTxs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MEVTxs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MEVTxs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MEVTxs.Merge(m, src)
}
func (m *MEVTxs) XXX_Size() int {
	return m.Size()
}
func (m *MEVTxs) XXX_DiscardUnknown() {
	xxx_messageInfo_MEVTxs.DiscardUnknown(m)
}

var xxx_messageInfo_MEVTxs proto.InternalMessageInfo

func (m *MEVTxs) GetTxs() [][]byte {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *MEVTxs) GetDesiredHeight() int64 {
	if m != nil {
		return m.DesiredHeight
	}
	return 0
}

func (m *MEVTxs) GetBundleId() int64 {
	if m != nil {
		return m.BundleId
	}
	return 0
}

func (m *MEVTxs) GetBundleOrder() int64 {
	if m != nil {
		return m.BundleOrder
	}
	return 0
}

func (m *MEVTxs) GetBundleSize() int64 {
	if m != nil {
		return m.BundleSize
	}
	return 0
}

func (m *MEVTxs) GetGasWanted() int64 {
	if m != nil {
		return m.GasWanted
	}
	return 0
}

func init() {
	proto.RegisterType((*Txs)(nil), "tendermint.mempool.Txs")
	proto.RegisterType((*Message)(nil), "tendermint.mempool.Message")
	proto.RegisterType((*MEVMessage)(nil), "tendermint.mempool.MEVMessage")
	proto.RegisterType((*MEVTxs)(nil), "tendermint.mempool.MEVTxs")
}

func init() { proto.RegisterFile("tendermint/mempool/types.proto", fileDescriptor_2af51926fdbcbc05) }

var fileDescriptor_2af51926fdbcbc05 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x92, 0x41, 0x4b, 0xeb, 0x40,
	0x10, 0xc7, 0xb3, 0x2f, 0xaf, 0xe9, 0xeb, 0xb4, 0xef, 0xf1, 0xd8, 0x4b, 0x83, 0xe2, 0xaa, 0x05,
	0xa1, 0x20, 0x24, 0xa0, 0x78, 0xf0, 0x2a, 0x14, 0xea, 0xa1, 0x08, 0x6d, 0xa9, 0xe0, 0x25, 0xa4,
	0xee, 0x90, 0x2e, 0x74, 0x93, 0x92, 0xdd, 0xd6, 0xd8, 0x4f, 0xe1, 0x57, 0xf2, 0xe6, 0xb1, 0x47,
	0x8f, 0xd2, 0x1e, 0xfc, 0x1a, 0xd2, 0x4d, 0x8a, 0x85, 0x7a, 0xf2, 0xe6, 0x6d, 0xf2, 0xfb, 0xcd,
	0x3f, 0xc9, 0x0c, 0x03, 0x4c, 0x63, 0xcc, 0x31, 0x95, 0x22, 0xd6, 0xbe, 0x44, 0x39, 0x49, 0x92,
	0xb1, 0xaf, 0x1f, 0x27, 0xa8, 0xbc, 0x49, 0x9a, 0xe8, 0x84, 0xd2, 0x4f, 0xef, 0x15, 0xbe, 0x51,
	0x07, 0xbb, 0x9f, 0x29, 0xfa, 0x1f, 0x6c, 0x9d, 0x29, 0x97, 0x1c, 0xd9, 0xcd, 0x5a, 0x77, 0x5d,
	0x36, 0x34, 0x94, 0x3b, 0xa8, 0x54, 0x18, 0x21, 0x3d, 0xdd, 0x48, 0xd2, 0xac, 0x9e, 0xd5, 0xbd,
	0xdd, 0xb7, 0x78, 0xfd, 0x4c, 0xb5, 0x2d, 0x93, 0xa3, 0x17, 0x50, 0x96, 0x38, 0x0b, 0xd6, 0x81,
	0x5f, 0x26, 0xb0, 0xf7, 0x55, 0xa0, 0xd3, 0x1a, 0xe4, 0x19, 0x47, 0xe2, 0xac, 0x9f, 0xa9, 0xab,
	0x12, 0xd8, 0x6a, 0x2a, 0x1b, 0xef, 0x04, 0xa0, 0xd3, 0x1a, 0x7c, 0xeb, 0xcb, 0x27, 0xf0, 0x8f,
	0xa3, 0x12, 0x29, 0xf2, 0x60, 0x84, 0x22, 0x1a, 0x69, 0xf3, 0x03, 0x76, 0xf7, 0x6f, 0x41, 0xdb,
	0x06, 0xd2, 0x7d, 0xa8, 0x0c, 0xa7, 0x31, 0x1f, 0x63, 0x20, 0xb8, 0x6b, 0x9b, 0x8e, 0x3f, 0x39,
	0xb8, 0xe6, 0xf4, 0x18, 0x6a, 0x85, 0x4c, 0x52, 0x8e, 0xa9, 0xfb, 0xdb, 0xf8, 0x6a, 0xce, 0x6e,
	0xd6, 0x88, 0x1e, 0x42, 0xf1, 0x18, 0x28, 0x31, 0x47, 0xb7, 0x64, 0x3a, 0x20, 0x47, 0x3d, 0x31,
	0x47, 0x7a, 0x00, 0x10, 0x85, 0x2a, 0x78, 0x08, 0x63, 0x8d, 0xdc, 0x75, 0x8c, 0xaf, 0x44, 0xa1,
	0xba, 0x35, 0x60, 0x33, 0xe9, 0x33, 0x01, 0x27, 0xdf, 0xc2, 0xee, 0xf2, 0x7f, 0xca, 0x28, 0xbd,
	0x97, 0x25, 0x23, 0x8b, 0x25, 0x23, 0x6f, 0x4b, 0x46, 0x9e, 0x56, 0xcc, 0x5a, 0xac, 0x98, 0xf5,
	0xba, 0x62, 0xd6, 0xdd, 0x65, 0x24, 0xf4, 0x68, 0x3a, 0xf4, 0xee, 0x13, 0xe9, 0x6f, 0x5d, 0xe5,
	0x56, 0x69, 0x4e, 0xd2, 0xdf, 0xbd, 0xd8, 0xa1, 0x63, 0xcc, 0xf9, 0x47, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x21, 0x6d, 0x3f, 0xa4, 0xce, 0x02, 0x00, 0x00,
}

func (m *Txs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Txs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Txs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Txs[iNdEx])
			copy(dAtA[i:], m.Txs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Txs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Message_Txs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Txs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Txs != nil {
		{
			size, err := m.Txs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Message_MevTxs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MevTxs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MevTxs != nil {
		{
			size, err := m.MevTxs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MEVMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MEVMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MEVMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasWanted != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GasWanted))
		i--
		dAtA[i] = 0x30
	}
	if m.BundleSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BundleSize))
		i--
		dAtA[i] = 0x28
	}
	if m.BundleOrder != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BundleOrder))
		i--
		dAtA[i] = 0x20
	}
	if m.BundleId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BundleId))
		i--
		dAtA[i] = 0x18
	}
	if m.DesiredHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DesiredHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MEVMessage_Txs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MEVMessage_Txs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Txs != nil {
		{
			size, err := m.Txs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MEVTxs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MEVTxs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MEVTxs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasWanted != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GasWanted))
		i--
		dAtA[i] = 0x30
	}
	if m.BundleSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BundleSize))
		i--
		dAtA[i] = 0x28
	}
	if m.BundleOrder != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BundleOrder))
		i--
		dAtA[i] = 0x20
	}
	if m.BundleId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BundleId))
		i--
		dAtA[i] = 0x18
	}
	if m.DesiredHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DesiredHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Txs[iNdEx])
			copy(dAtA[i:], m.Txs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Txs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Txs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, b := range m.Txs {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *Message_Txs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Txs != nil {
		l = m.Txs.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Message_MevTxs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MevTxs != nil {
		l = m.MevTxs.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MEVMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	if m.DesiredHeight != 0 {
		n += 1 + sovTypes(uint64(m.DesiredHeight))
	}
	if m.BundleId != 0 {
		n += 1 + sovTypes(uint64(m.BundleId))
	}
	if m.BundleOrder != 0 {
		n += 1 + sovTypes(uint64(m.BundleOrder))
	}
	if m.BundleSize != 0 {
		n += 1 + sovTypes(uint64(m.BundleSize))
	}
	if m.GasWanted != 0 {
		n += 1 + sovTypes(uint64(m.GasWanted))
	}
	return n
}

func (m *MEVMessage_Txs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Txs != nil {
		l = m.Txs.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MEVTxs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, b := range m.Txs {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DesiredHeight != 0 {
		n += 1 + sovTypes(uint64(m.DesiredHeight))
	}
	if m.BundleId != 0 {
		n += 1 + sovTypes(uint64(m.BundleId))
	}
	if m.BundleOrder != 0 {
		n += 1 + sovTypes(uint64(m.BundleOrder))
	}
	if m.BundleSize != 0 {
		n += 1 + sovTypes(uint64(m.BundleSize))
	}
	if m.GasWanted != 0 {
		n += 1 + sovTypes(uint64(m.GasWanted))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Txs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Txs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Txs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, make([]byte, postIndex-iNdEx))
			copy(m.Txs[len(m.Txs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Txs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_Txs{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MevTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MEVTxs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MevTxs{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MEVMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MEVMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MEVMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Txs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &MEVMessage_Txs{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredHeight", wireType)
			}
			m.DesiredHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DesiredHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleId", wireType)
			}
			m.BundleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BundleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleOrder", wireType)
			}
			m.BundleOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BundleOrder |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleSize", wireType)
			}
			m.BundleSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BundleSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasWanted", wireType)
			}
			m.GasWanted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasWanted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MEVTxs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MEVTxs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MEVTxs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, make([]byte, postIndex-iNdEx))
			copy(m.Txs[len(m.Txs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredHeight", wireType)
			}
			m.DesiredHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DesiredHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleId", wireType)
			}
			m.BundleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BundleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleOrder", wireType)
			}
			m.BundleOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BundleOrder |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleSize", wireType)
			}
			m.BundleSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BundleSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasWanted", wireType)
			}
			m.GasWanted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasWanted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

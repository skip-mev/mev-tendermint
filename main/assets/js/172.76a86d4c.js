(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{745:function(I,y,b){"use strict";b.r(y);var g=b(1),c=Object(g.a)({},(function(){var I=this,y=I.$createElement,b=I._self._c||y;return b("ContentSlotsDistributor",{attrs:{"slot-key":I.$parent.slotKey}},[b("h1",{attrs:{id:"configuration"}},[b("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[I._v("#")]),I._v(" Configuration")]),I._v(" "),b("p",[I._v("Tendermint Core can be configured via a TOML file in\n"),b("code",[I._v("$TMHOME/config/config.toml")]),I._v(". Some of these parameters can be overridden by\ncommand-line flags. For most users, the options in the "),b("code",[I._v("##### main base configuration options #####")]),I._v(" are intended to be modified while config options\nfurther below are intended for advance power users.")]),I._v(" "),b("h2",{attrs:{id:"options"}},[b("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[I._v("#")]),I._v(" Options")]),I._v(" "),b("p",[I._v("The default configuration file create by "),b("code",[I._v("tendermint init")]),I._v(" has all\nthe parameters set with their default values. It will look something\nlike the file below, however, double check by inspecting the\n"),b("code",[I._v("config.toml")]),I._v(" created with your version of "),b("code",[I._v("tendermint")]),I._v(" installed:")]),I._v(" "),b("tm-code-block",{staticClass:"codeblock",attrs:{language:"toml",base64:""}}),I._v(" "),b("h2",{attrs:{id:"empty-blocks-vs-no-empty-blocks"}},[b("a",{staticClass:"header-anchor",attrs:{href:"#empty-blocks-vs-no-empty-blocks"}},[I._v("#")]),I._v(" Empty blocks VS no empty blocks")]),I._v(" "),b("h3",{attrs:{id:"create-empty-blocks-true"}},[b("a",{staticClass:"header-anchor",attrs:{href:"#create-empty-blocks-true"}},[I._v("#")]),I._v(" create_empty_blocks = true")]),I._v(" "),b("p",[I._v("If "),b("code",[I._v("create_empty_blocks")]),I._v(" is set to "),b("code",[I._v("true")]),I._v(" in your config, blocks will be\ncreated ~ every second (with default consensus parameters). You can regulate\nthe delay between blocks by changing the "),b("code",[I._v("timeout_commit")]),I._v(". E.g. "),b("code",[I._v('timeout_commit = "10s"')]),I._v(" should result in ~ 10 second blocks.")]),I._v(" "),b("h3",{attrs:{id:"create-empty-blocks-false"}},[b("a",{staticClass:"header-anchor",attrs:{href:"#create-empty-blocks-false"}},[I._v("#")]),I._v(" create_empty_blocks = false")]),I._v(" "),b("p",[I._v("In this setting, blocks are created when transactions received.")]),I._v(" "),b("p",[I._v("Note after the block H, Tendermint creates something we call a \"proof block\"\n(only if the application hash changed) H+1. The reason for this is to support\nproofs. If you have a transaction in block H that changes the state to X, the\nnew application hash will only be included in block H+1. If after your\ntransaction is committed, you want to get a light-client proof for the new state\n(X), you need the new block to be committed in order to do that because the new\nblock has the new application hash for the state X. That's why we make a new\n(empty) block if the application hash changes. Otherwise, you won't be able to\nmake a proof for the new state.")]),I._v(" "),b("p",[I._v("Plus, if you set "),b("code",[I._v("create_empty_blocks_interval")]),I._v(" to something other than the\ndefault ("),b("code",[I._v("0")]),I._v("), Tendermint will be creating empty blocks even in the absence of\ntransactions every "),b("code",[I._v("create_empty_blocks_interval")]),I._v(". For instance, with\n"),b("code",[I._v("create_empty_blocks = false")]),I._v(" and "),b("code",[I._v('create_empty_blocks_interval = "30s"')]),I._v(",\nTendermint will only create blocks if there are transactions, or after waiting\n30 seconds without receiving any transactions.")]),I._v(" "),b("h2",{attrs:{id:"consensus-timeouts-explained"}},[b("a",{staticClass:"header-anchor",attrs:{href:"#consensus-timeouts-explained"}},[I._v("#")]),I._v(" Consensus timeouts explained")]),I._v(" "),b("p",[I._v("There's a variety of information about timeouts in "),b("RouterLink",{attrs:{to:"/tendermint-core/running-in-production.html"}},[I._v("Running in\nproduction")])],1),I._v(" "),b("p",[I._v("You can also find more detailed technical explanation in the spec: "),b("a",{attrs:{href:"https://arxiv.org/abs/1807.04938",target:"_blank",rel:"noopener noreferrer"}},[I._v("The latest\ngossip on BFT consensus"),b("OutboundLink")],1),I._v(".")]),I._v(" "),b("tm-code-block",{staticClass:"codeblock",attrs:{language:"toml",base64:"W2NvbnNlbnN1c10KLi4uCgp0aW1lb3V0X3Byb3Bvc2UgPSAmcXVvdDszcyZxdW90Owp0aW1lb3V0X3Byb3Bvc2VfZGVsdGEgPSAmcXVvdDs1MDBtcyZxdW90Owp0aW1lb3V0X3ByZXZvdGUgPSAmcXVvdDsxcyZxdW90Owp0aW1lb3V0X3ByZXZvdGVfZGVsdGEgPSAmcXVvdDs1MDBtcyZxdW90Owp0aW1lb3V0X3ByZWNvbW1pdCA9ICZxdW90OzFzJnF1b3Q7CnRpbWVvdXRfcHJlY29tbWl0X2RlbHRhID0gJnF1b3Q7NTAwbXMmcXVvdDsKdGltZW91dF9jb21taXQgPSAmcXVvdDsxcyZxdW90Owo="}}),I._v(" "),b("p",[I._v("Note that in a successful round, the only timeout that we absolutely wait no\nmatter what is "),b("code",[I._v("timeout_commit")]),I._v(".")]),I._v(" "),b("p",[I._v("Here's a brief summary of the timeouts:")]),I._v(" "),b("ul",[b("li",[b("code",[I._v("timeout_propose")]),I._v(" = how long we wait for a proposal block before prevoting\nnil")]),I._v(" "),b("li",[b("code",[I._v("timeout_propose_delta")]),I._v(" = how much timeout_propose increases with each round")]),I._v(" "),b("li",[b("code",[I._v("timeout_prevote")]),I._v(" = how long we wait after receiving +2/3 prevotes for\nanything (ie. not a single block or nil)")]),I._v(" "),b("li",[b("code",[I._v("timeout_prevote_delta")]),I._v(" = how much the timeout_prevote increases with each\nround")]),I._v(" "),b("li",[b("code",[I._v("timeout_precommit")]),I._v(" = how long we wait after receiving +2/3 precommits for\nanything (ie. not a single block or nil)")]),I._v(" "),b("li",[b("code",[I._v("timeout_precommit_delta")]),I._v(" = how much the timeout_precommit increases with\neach round")]),I._v(" "),b("li",[b("code",[I._v("timeout_commit")]),I._v(" = how long we wait after committing a block, before starting\non the new height (this gives us a chance to receive some more precommits,\neven though we already have +2/3)")])])],1)}),[],!1,null,null,null);y.default=c.exports}}]);
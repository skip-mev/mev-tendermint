(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{727:function(e,t,a){"use strict";a.r(t);var n=a(1),i=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"rfc-008-don-t-panic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rfc-008-don-t-panic"}},[e._v("#")]),e._v(" RFC 008: Don't Panic")]),e._v(" "),a("h2",{attrs:{id:"changelog"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#changelog"}},[e._v("#")]),e._v(" Changelog")]),e._v(" "),a("ul",[a("li",[e._v("2021-12-17: initial draft (@tychoish)")])]),e._v(" "),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("p",[e._v("Today, the Tendermint core codebase has panics in a number of cases as\na response to exceptional situations. These panics complicate testing,\nand might make tendermint components difficult to use as a library in\nsome circumstances. This document outlines a project of converting\npanics to errors and describes the situations where its safe to\npanic.")]),e._v(" "),a("h2",{attrs:{id:"background"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#background"}},[e._v("#")]),e._v(" Background")]),e._v(" "),a("p",[e._v("Panics in Go are a great mechanism for aborting the current execution\nfor truly exceptional situations (e.g. memory errors, data corruption,\nprocesses initialization); however, because they resemble exceptions\nin other languages, it can be easy to over use them in the\nimplementation of software architectures. This certainly happened in\nthe history of Tendermint, and as we embark on the project of\nstabilizing the package, we find ourselves in the right moment to\nreexamine our use of panics, and largely where panics happen in the\ncode base.")]),e._v(" "),a("p",[e._v("There are still some situations where panics are acceptable and\ndesireable, but it's important that Tendermint, as a project, comes to\nconsensus--perhaps in the text of this document--on the situations\nwhere it is acceptable to panic.")]),e._v(" "),a("h3",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://go.dev/blog/defer-panic-and-recover",target:"_blank",rel:"noopener noreferrer"}},[e._v("Defer Panic and Recover"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://dave.cheney.net/tag/panic",target:"_blank",rel:"noopener noreferrer"}},[e._v("Why Go gets exceptions right"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://dave.cheney.net/practical-go/presentations/gophercon-singapore-2019.html#_dont_panic",target:"_blank",rel:"noopener noreferrer"}},[e._v("Don't panic"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"discussion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#discussion"}},[e._v("#")]),e._v(" Discussion")]),e._v(" "),a("h3",{attrs:{id:"acceptable-panics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#acceptable-panics"}},[e._v("#")]),e._v(" Acceptable Panics")]),e._v(" "),a("h4",{attrs:{id:"initialization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialization"}},[e._v("#")]),e._v(" Initialization")]),e._v(" "),a("p",[e._v("It is unambiguously safe (and desireable) to panic in "),a("code",[e._v("init()")]),e._v("\nfunctions in response to any kind of error. These errors are caught by\ntests, and occur early enough in process initialization that they\nwon't cause unexpected runtime crashes.")]),e._v(" "),a("p",[e._v("Other code that is called early in process initialization MAY panic,\nin some situations if it's not possible to return an error or cause\nthe process to abort early, although these situations should be\nvanishingly slim.")]),e._v(" "),a("h4",{attrs:{id:"data-corruption"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-corruption"}},[e._v("#")]),e._v(" Data Corruption")]),e._v(" "),a("p",[e._v("If Tendermint code encounters an inconsistency that could be\nattributed to data corruption or a logical impossibility it is safer\nto panic and crash the process than continue to attempt to make\nprogress in these situations.")]),e._v(" "),a("p",[e._v("Examples including reading data out of the storage engine that\nis invalid or corrupt, or encountering an ambiguous situation where\nthe process should halt. Generally these forms of corruption are\ndetected after interacting with a trusted but external data source,\nand reflect situations where the author thinks its safer to terminate\nthe process immediately rather than allow execution to continue.")]),e._v(" "),a("h4",{attrs:{id:"unrecoverable-consensus-failure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unrecoverable-consensus-failure"}},[e._v("#")]),e._v(" Unrecoverable Consensus Failure")]),e._v(" "),a("p",[e._v("In general, a panic should be used in the case of unrecoverable\nconsensus failures. If a process detects that the network is\nbehaving in an incoherent way and it does not have a clearly defined\nand mechanism for recovering, the process should panic.")]),e._v(" "),a("h4",{attrs:{id:"static-validity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-validity"}},[e._v("#")]),e._v(" Static Validity")]),e._v(" "),a("p",[e._v("It is acceptable to panic for invariant violations, within a library\nor package, in situations that should be statically impossible,\nbecause there is no way to make these kinds of assertions at compile\ntime.")]),e._v(" "),a("p",[e._v("For example, type-asserting "),a("code",[e._v("interface{}")]),e._v(" values returned by\n"),a("code",[e._v("container/list")]),e._v(" and "),a("code",[e._v("container/heap")]),e._v(" (and similar), is acceptable,\nbecause package authors should have exclusive control of the inputs to\nthese containers. Packages should not expose the ability to add\narbitrary values to these data structures.")]),e._v(" "),a("h4",{attrs:{id:"controlled-panics-within-libraries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#controlled-panics-within-libraries"}},[e._v("#")]),e._v(" Controlled Panics Within Libraries")]),e._v(" "),a("p",[e._v("In some algorithms with highly recursive structures or very nested\ncall patterns, using a panic, in combination with conditional recovery\nhandlers results in more manageable code. Ultimately this is a limited\napplication, and implementations that use panics internally should\nonly recover conditionally, filtering out panics rather than ignoring\nor handling all panics.")]),e._v(" "),a("h4",{attrs:{id:"request-handling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#request-handling"}},[e._v("#")]),e._v(" Request Handling")]),e._v(" "),a("p",[e._v("Code that handles responses to incoming/external requests\n(e.g. "),a("code",[e._v("http.Handler")]),e._v(") should avoid panics, but practice this isn't\ntotally possible, and it makes sense that request handlers have some\nkind of default recovery mechanism that will prevent one request from\nterminating a service.")]),e._v(" "),a("h3",{attrs:{id:"unacceptable-panics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unacceptable-panics"}},[e._v("#")]),e._v(" Unacceptable Panics")]),e._v(" "),a("p",[e._v("In "),a("strong",[e._v("no")]),e._v(" other situation is it acceptable for the code to panic:")]),e._v(" "),a("ul",[a("li",[e._v("there should be "),a("strong",[e._v("no")]),e._v(" controlled panics that callers are required\nto handle across library/package boundaries.")]),e._v(" "),a("li",[e._v("callers of library functions should not expect panics.")]),e._v(" "),a("li",[e._v("ensuring that arbitrary go routines can't panic.")]),e._v(" "),a("li",[e._v("ensuring that there are no arbitrary panics in core production code,\nespically code that can run at any time during the lifetime of a\nprocess.")]),e._v(" "),a("li",[e._v("all test code and fixture should report normal test assertions with\na mechanism like testify's "),a("code",[e._v("require")]),e._v(" assertion rather than calling\npanic directly.")])]),e._v(" "),a("p",[e._v('The goal of this increased "panic rigor" is to ensure that any escaped\npanic is reflects a fixable bug in Tendermint.')]),e._v(" "),a("h3",{attrs:{id:"removing-panics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removing-panics"}},[e._v("#")]),e._v(" Removing Panics")]),e._v(" "),a("p",[e._v("The process for removing panics involve a few steps, and will be part\nof an ongoing process of code modernization:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("converting existing explicit panics to errors in cases where it's\npossible to return an error, the errors can and should be handled, and returning\nan error would not lead to data corruption or cover up data\ncorruption.")])]),e._v(" "),a("li",[a("p",[e._v("increase rigor around operations that can cause runtime errors, like\ntype assertions, nil pointer errors, array bounds access issues, and\neither avoid these situations or return errors where possible.")])]),e._v(" "),a("li",[a("p",[e._v("remove generic panic handlers which could cover and hide known\npanics.")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);
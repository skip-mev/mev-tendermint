(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{737:function(e,t,a){"use strict";a.r(t);var n=a(1),i=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"rfc-018-bls-signature-aggregation-exploration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rfc-018-bls-signature-aggregation-exploration"}},[e._v("#")]),e._v(" RFC 018: BLS Signature Aggregation Exploration")]),e._v(" "),a("h2",{attrs:{id:"changelog"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#changelog"}},[e._v("#")]),e._v(" Changelog")]),e._v(" "),a("ul",[a("li",[e._v("01-April-2022: Initial draft (@williambanfield).")]),e._v(" "),a("li",[e._v("15-April-2022: Draft complete (@williambanfield).")])]),e._v(" "),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("h2",{attrs:{id:"background"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#background"}},[e._v("#")]),e._v(" Background")]),e._v(" "),a("h3",{attrs:{id:"glossary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#glossary"}},[e._v("#")]),e._v(" Glossary")]),e._v(" "),a("p",[e._v("The terms that are attached to these types of cryptographic signing systems\nbecome confusing quickly. Different sources appear to use slightly different\nmeanings of each term and this can certainly add to the confusion. Below is\na brief glossary that may be helpful in understanding the discussion that follows.")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Short Signature")]),e._v(": A signature that does not vary in length with the\nnumber of signers.")]),e._v(" "),a("li",[a("strong",[e._v("Multi-Signature")]),e._v(": A signature generated over a single message\nwhere, given the message and signature, a verifier is able to determine that\nall parties signed the message. May be short or may vary with the number of signers.")]),e._v(" "),a("li",[a("strong",[e._v("Aggregated Signature")]),e._v(": A "),a("em",[e._v("short")]),e._v(" signature generated over messages with\npossibly different content where, given the messages and signature, a verifier\nshould be able to determine that all the parties signed the designated messages.")]),e._v(" "),a("li",[a("strong",[e._v("Threshold Signature")]),e._v(": A "),a("em",[e._v("short")]),e._v(" signature generated from multiple signers\nwhere, given a message and the signature, a verifier is able to determine that\na large enough share of the parties signed the message. The identities of the\nparties that contributed to the signature are not revealed.")]),e._v(" "),a("li",[a("strong",[e._v("BLS Signature")]),e._v(": An elliptic-curve pairing-based signature system that\nhas some nice properties for short multi-signatures. May stand for\n"),a("em",[e._v("Boneh-Lynn-Schacham")]),e._v(" or "),a("em",[e._v("Barreto-Lynn-Scott")]),e._v(" depending on the context. A\nBLS signature is type of signature scheme that is distinct from other forms\nof elliptic-curve signatures such as ECDSA and EdDSA.")]),e._v(" "),a("li",[a("strong",[e._v("Interactive")]),e._v(": Cryptographic scheme where parties need to perform one or\nmore request-response cycles to produce the cryptographic material. For\nexample, an interactive signature scheme may require the signer and the\nverifier to cooperate to create and/or verify the signature, rather than a\nsignature being created ahead of time.")]),e._v(" "),a("li",[a("strong",[e._v("Non-interactive")]),e._v(": Cryptographic scheme where parties do not need to\nperform any request-response cycles to produce the cryptographic material.")])]),e._v(" "),a("h3",{attrs:{id:"brief-notes-on-pairing-based-elliptic-curve-cryptography"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#brief-notes-on-pairing-based-elliptic-curve-cryptography"}},[e._v("#")]),e._v(" Brief notes on pairing-based elliptic-curve cryptography")]),e._v(" "),a("p",[e._v("Pairing-based elliptic-curve cryptography is quite complex and relies on several\ntypes of high-level math. Cryptography, in general, relies on being able to find\nproblems with an asymmetry between the difficulty of calculating the solution\nand verifying that a given solution is correct.")]),e._v(" "),a("p",[e._v("Pairing-based cryptography works by operating on mathematical functions that\nsatisfy the property of "),a("strong",[e._v("bilinear mapping")]),e._v(". This property is satisfied for\nfunctions "),a("code",[e._v("e")]),e._v(" with values "),a("code",[e._v("P")]),e._v(", "),a("code",[e._v("Q")]),e._v(", "),a("code",[e._v("R")]),e._v(" and "),a("code",[e._v("S")]),e._v(" where "),a("code",[e._v("e(P, Q + R) = e(P, Q) * e(P, R)")]),e._v("\nand "),a("code",[e._v("e(P + S, Q) = e(P, Q) * e(S, Q)")]),e._v(". The most familiar example of this is\nexponentiation. Written in common notation, "),a("code",[e._v("g^P*(Q+R) = g^(P*Q) * g^(P*R)")]),e._v(" for\nsome value "),a("code",[e._v("g")]),e._v(".")]),e._v(" "),a("p",[e._v("Pairing-based elliptic-curve cryptography creates a bilinear mapping using\nelliptic curves over a finite field. With some original curve, you can define two groups,\n"),a("code",[e._v("G1")]),e._v(" and "),a("code",[e._v("G2")]),e._v(" which are points of the original curve "),a("em",[e._v("modulo")]),e._v(" different values.\nFinally, you define a third group "),a("code",[e._v("Gt")]),e._v(", where points from "),a("code",[e._v("G1")]),e._v(" and "),a("code",[e._v("G2")]),e._v(" satisfy\nthe property of bilinearity with "),a("code",[e._v("Gt")]),e._v(". In this scheme, the function "),a("code",[e._v("e")]),e._v(" takes\nas inputs points in "),a("code",[e._v("G1")]),e._v(" and "),a("code",[e._v("G2")]),e._v(" and outputs values in "),a("code",[e._v("Gt")]),e._v(". Succintly, given\nsome point "),a("code",[e._v("P")]),e._v(" in "),a("code",[e._v("G1")]),e._v(" and some point "),a("code",[e._v("Q")]),e._v(" in "),a("code",[e._v("G1")]),e._v(", "),a("code",[e._v("e(P, Q) = C")]),e._v(" where "),a("code",[e._v("C")]),e._v(" is in "),a("code",[e._v("Gt")]),e._v(".\nYou can efficiently compute the mapping of points in "),a("code",[e._v("G1")]),e._v(" and "),a("code",[e._v("G2")]),e._v(" into "),a("code",[e._v("Gt")]),e._v(",\nbut you cannot efficiently determine what points were summed and paired to\nproduce the value in "),a("code",[e._v("Gt")]),e._v(".")]),e._v(" "),a("p",[e._v("Functions are then defined to map digital signatures, messages, and keys into\nand out of points of "),a("code",[e._v("G1")]),e._v(" or "),a("code",[e._v("G2")]),e._v(" and signature verification is the process\nof calculating if a set of values representing a message, public key, and digital\nsignature produce the same value in "),a("code",[e._v("Gt")]),e._v(" through "),a("code",[e._v("e")]),e._v(".")]),e._v(" "),a("p",[e._v("Signatures can be created as either points in "),a("code",[e._v("G1")]),e._v(" with public keys being\ncreated as points in "),a("code",[e._v("G2")]),e._v(" or vice versa. For the case of BLS12-381, the popular\ncurve used, points in "),a("code",[e._v("G1")]),e._v(" are represented with 48 bytes and points in "),a("code",[e._v("G2")]),e._v(" are\nrepresented with 96 bytes. It is up to the implementer of the cryptosystem to\ndecide which should be larger, the public keys or the signatures.")]),e._v(" "),a("p",[e._v("BLS signatures rely on pairing-based elliptic-curve cryptography to produce\nvarious types of signatures. For a more in-depth but still high level discussion\npairing-based elliptic-curve cryptography, see Vitalik Buterin's post on\n"),a("a",{attrs:{href:"https://medium.com/@VitalikButerin/exploring-elliptic-curve-pairings-c73c1864e627",target:"_blank",rel:"noopener noreferrer"}},[e._v("Exploring Elliptic Curve Pairings"),a("OutboundLink")],1),e._v(". For much more in\ndepth discussion, see the specific paper on BLS12-381, "),a("a",{attrs:{href:"https://www.iacr.org/archive/asiacrypt2001/22480516.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Short signatures from\nthe Weil Pairing"),a("OutboundLink")],1),e._v(" and\n"),a("a",{attrs:{href:"https://eprint.iacr.org/2018/483.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Compact Multi-Signatures for Smaller Blockchains"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"adoption"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adoption"}},[e._v("#")]),e._v(" Adoption")]),e._v(" "),a("p",[e._v("BLS signatures have already gained traction within several popular projects.")]),e._v(" "),a("ul",[a("li",[e._v("Algorand is working on an implementation.")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/zcash/zcash/issues/2502",target:"_blank",rel:"noopener noreferrer"}},[e._v("Zcash"),a("OutboundLink")],1),e._v(" has adopted BLS12-381 into the protocol.")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://notes.ethereum.org/@GW1ZUbNKR5iRjjKYx6_dJQ/Skxf3tNcg_",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ethereum 2.0"),a("OutboundLink")],1),e._v(" has adopted BLS12-381 into the protocol.")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/Chia-Network/chia-blockchain#chia-blockchain",target:"_blank",rel:"noopener noreferrer"}},[e._v("Chia Network"),a("OutboundLink")],1),e._v(" has adopted BLS for signing blocks.")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/line/ostracon/pull/117",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ostracon"),a("OutboundLink")],1),e._v(", a fork of Tendermint has adopted BLS for signing blocks.")])]),e._v(" "),a("h3",{attrs:{id:"what-systems-may-be-affected-by-adding-aggregated-signatures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-systems-may-be-affected-by-adding-aggregated-signatures"}},[e._v("#")]),e._v(" What systems may be affected by adding aggregated signatures?")]),e._v(" "),a("h4",{attrs:{id:"gossip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gossip"}},[e._v("#")]),e._v(" Gossip")]),e._v(" "),a("p",[e._v("Gossip could be updated to aggregate vote signatures during a consensus round.\nThis appears to be of frankly little utility. Creating an aggregated signature\nincurs overhead, so frequently re-aggregating may incur a significant\noverhead. How costly this is is still subject to further investigation and\nperformance testing.")]),e._v(" "),a("p",[e._v("Even if vote signatures were aggregated before gossip, each validator would still\nneed to receive and verify vote extension data from each (individual) peer validator in\norder for consensus to proceed. That displaces any advantage gained by aggregating signatures across the vote message in the presence of vote extensions.")]),e._v(" "),a("h4",{attrs:{id:"block-creation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block-creation"}},[e._v("#")]),e._v(" Block Creation")]),e._v(" "),a("p",[e._v("When creating a block, the proposer may create a small set of short\nmulti-signatures and attach these to the block instead of including one\nsignature per validator.")]),e._v(" "),a("h4",{attrs:{id:"block-verification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block-verification"}},[e._v("#")]),e._v(" Block Verification")]),e._v(" "),a("p",[e._v("Currently, we verify each validator signature using the public key associated\nwith that validator.  With signature aggregation, verification of blocks would\nnot verify many signatures individually, but would instead check the (single)\nmulti-signature using the public keys stored by the validator. This would also\nrequire a mechanism for indicating which validators are included in the\naggregated signature.")]),e._v(" "),a("h4",{attrs:{id:"ibc-relaying"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ibc-relaying"}},[e._v("#")]),e._v(" IBC Relaying")]),e._v(" "),a("p",[e._v("IBC would no longer need to transmit a large set of signatures when\nupdating state. These state updates do not happen for every IBC packet, only\nwhen changing an IBC light client's view of the counterparty chain's state.\nGeneral [IBC packets][ibc-packet] only contain enough information to correctly\nroute the data to the counterparty chain.")]),e._v(" "),a("p",[e._v("IBC does persist commit signatures to the chain in these "),a("code",[e._v("MsgUpdateClient")]),e._v("\nmessage when updating state. This message would no longer need the full set\nof unique signatures and would instead only need one signature for all of the\ndata in the header.")]),e._v(" "),a("p",[e._v("Adding BLS signatures would create a new signature type that must be\nunderstood by the IBC module and by the relayers. For some operations, such\nas state updates, the set of data written into the chain and received by the\nIBC module could be slightly smaller.")]),e._v(" "),a("h2",{attrs:{id:"discussion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#discussion"}},[e._v("#")]),e._v(" Discussion")]),e._v(" "),a("h3",{attrs:{id:"what-are-the-proposed-benefits-to-aggregated-signatures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-are-the-proposed-benefits-to-aggregated-signatures"}},[e._v("#")]),e._v(" What are the proposed benefits to aggregated signatures?")]),e._v(" "),a("h4",{attrs:{id:"reduce-block-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reduce-block-size"}},[e._v("#")]),e._v(" Reduce Block Size")]),e._v(" "),a("p",[e._v("At the moment, a commit contains a 64-byte (512-bit) signature for each validator\nthat voted for the block. For the Cosmos Hub, which has 175 validators in the\nactive set, this amounts to about 11 KiB per block. That gives an upper bound of\naround 113 GiB over the lifetime of the chain's 10.12M blocks. (Note, the Hub has\nincreased the number of validators in the active set over time so the total\nsignature size over the history of the chain is likely somewhat less than that).")]),e._v(" "),a("p",[e._v("Signature aggregation would only produce two signatures for the entire block.\nOne for the yeas and one for the nays. Each BLS aggregated signature is 48\nbytes, per the "),a("a",{attrs:{href:"https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-bls-signature-04#section-1.1",target:"_blank",rel:"noopener noreferrer"}},[e._v("IETF standard of BLS signatures"),a("OutboundLink")],1),e._v(".\nOver the lifetime of the same Cosmos Hub chain, that would amount to about 1\nGB, a savings of 112 GB. While that is a large factor of reduction it's worth\nbearing in mind that, at "),a("a",{attrs:{href:"https://cloud.google.com/storage/pricing#north-america_2",target:"_blank",rel:"noopener noreferrer"}},[e._v("GCP's cost"),a("OutboundLink")],1),e._v(" of $.026 USD per GB,\nthat is a total savings of around $2.50 per month.")]),e._v(" "),a("h4",{attrs:{id:"reduce-signature-creation-and-verification-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reduce-signature-creation-and-verification-time"}},[e._v("#")]),e._v(" Reduce Signature Creation and Verification Time")]),e._v(" "),a("p",[e._v("From the "),a("a",{attrs:{href:"https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-bls-signature-04",target:"_blank",rel:"noopener noreferrer"}},[e._v("IETF draft standard on BLS Signatures"),a("OutboundLink")],1),e._v(", BLS signatures can be\ncreated in 370 microseconds and verified in 2700 microseconds. Our current\n"),a("a",{attrs:{href:"https://github.com/williambanfield/curve25519-voi/blob/benchmark/primitives/ed25519/PERFORMANCE.txt#L79",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ed25519 implementation"),a("OutboundLink")],1),e._v(" was benchmarked locally to take\n13.9 microseconds to produce a signature and 2.03 milliseconds to batch verify\n128 signatures, which is slightly fewer than the 175 in the Hub. blst, a popular\nimplementation of BLS signature aggregation was benchmarked to perform verification\non 100 signatures in 1.5 milliseconds "),a("a",{attrs:{href:"https://github.com/williambanfield/blst/blame/bench/bindings/go/PERFORMANCE.md#L9",target:"_blank",rel:"noopener noreferrer"}},[e._v("when run locally"),a("OutboundLink")],1),e._v("\non an 8 thread machine and pre-aggregated public keys. It is worth noting that\nthe "),a("code",[e._v("ed25519")]),e._v(" library verification time grew steadily with the number of signatures,\nwhereas the bls library verification time remains constant. This is because the\nnumber of operations used to verify a signature does not grow at all with the\nnumber of signatures included in the aggregate signature (as long as the signers\nsigned over the same message data as is the case in Tendermint).")]),e._v(" "),a("p",[e._v("It is worth noting that this would also represent a "),a("em",[e._v("degredation")]),e._v(" in signature\nverification time for chains with small validator sets. When batch verifying\nonly 32 signatures, our ed25519 library takes .57 milliseconds, whereas BLS\nwould still require the same 1.5 milliseconds.")]),e._v(" "),a("p",[e._v("For massive validator sets, blst dominates, taking the same 1.5 milliseconds to\ncheck an aggregated signature from 1024 validators versus our ed25519 library's\n13.066 milliseconds to batch verify a set of that size.")]),e._v(" "),a("h4",{attrs:{id:"reduce-light-client-verification-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reduce-light-client-verification-time"}},[e._v("#")]),e._v(" Reduce Light-Client Verification Time")]),e._v(" "),a("p",[e._v("The light client aims to be a faster and lighter-weight way to verify that a\nblock was voted on by a Tendermint network. The light client fetches\nTendermint block headers and commit signatures, performing public key\nverification to ensure that the associated validator set signed the block.\nReducing the size of the commit signature would allow the light client to fetch\nblock data more quickly.")]),e._v(" "),a("p",[e._v("Additionally, the faster signature verification times of BLS signatures mean\nthat light client verification would proceed more quickly.")]),e._v(" "),a("p",[e._v("However, verification of an aggregated signature is all-or-nothing. The verifier\ncannot check that some singular signer had a signature included in the block.\nInstead, the verifier must use all public keys to check if some signature\nwas included. This does mean that any light client implementation must always\nbe able to fetch all public keys for any height instead of potentially being\nable to check if some singular validator's key signed the block.")]),e._v(" "),a("h4",{attrs:{id:"reduce-gossip-bandwidth"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reduce-gossip-bandwidth"}},[e._v("#")]),e._v(" Reduce Gossip Bandwidth")]),e._v(" "),a("h5",{attrs:{id:"vote-gossip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vote-gossip"}},[e._v("#")]),e._v(" Vote Gossip")]),e._v(" "),a("p",[e._v("It is possible to aggregate subsets of signatures during voting, so that the\nnetwork need not gossip all "),a("em",[e._v("n")]),e._v(" validator signatures to all "),a("em",[e._v("n")]),e._v(" validators.\nTheoretically, subsets of the signatures could be aggregated during consensus\nand vote messages could carry those aggregated signatures. Implementing this\nwould certainly increase the complexity of the gossip layer but could possibly\nreduce the total number of signatures required to be verified by each validator.")]),e._v(" "),a("h5",{attrs:{id:"block-gossip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block-gossip"}},[e._v("#")]),e._v(" Block Gossip")]),e._v(" "),a("p",[e._v("A reduction in the block size as a result of signature aggregation would\nnaturally lead to a reduction in the bandwidth required to gossip a block.\nEach validator would only send and receive the smaller aggregated signatures\ninstead of the full list of multi-signatures as we have them now.")]),e._v(" "),a("h3",{attrs:{id:"what-are-the-drawbacks-to-aggregated-signatures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-are-the-drawbacks-to-aggregated-signatures"}},[e._v("#")]),e._v(" What are the drawbacks to aggregated signatures?")]),e._v(" "),a("h4",{attrs:{id:"heterogeneous-key-types-cannot-be-aggregated"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#heterogeneous-key-types-cannot-be-aggregated"}},[e._v("#")]),e._v(" Heterogeneous key types cannot be aggregated")]),e._v(" "),a("p",[e._v("Aggregation requires a specific signature algorithm, and our legacy signing schemes\ncannot be aggregated. In practice, this means that aggregated signatures could\nbe created for a subset of validators using BLS signatures, and validators\nwith other key types (such as Ed25519) would still have to be be separately\npropagated in blocks and votes.")]),e._v(" "),a("h4",{attrs:{id:"many-hsms-do-not-support-aggregated-signatures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#many-hsms-do-not-support-aggregated-signatures"}},[e._v("#")]),e._v(" Many HSMs do not support aggregated signatures")]),e._v(" "),a("p",[a("strong",[e._v("Hardware Signing Modules")]),e._v(" (HSM) are a popular way to manage private keys.\nThey provide additional security for key management and should be used when\npossible for storing highly sensitive private key material.")]),e._v(" "),a("p",[e._v("Below is a list of popular HSMs along with their support for BLS signatures.")]),e._v(" "),a("ul",[a("li",[e._v("YubiKey\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/Yubico/yubihsm-shell/issues/66",target:"_blank",rel:"noopener noreferrer"}},[e._v("No support"),a("OutboundLink")],1)])])]),e._v(" "),a("li",[e._v("Amazon Cloud HSM\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.aws.amazon.com/cloudhsm/latest/userguide/pkcs11-key-types.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("No support"),a("OutboundLink")],1)])])]),e._v(" "),a("li",[e._v("Ledger\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://www.ledger.com/first-ever-firmware-update-coming-to-the-ledger-nano-x",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lists support for the BLS12-381 curve"),a("OutboundLink")],1)])])])]),e._v(" "),a("p",[e._v("I cannot find support listed for Google Cloud, although perhaps it exists.")]),e._v(" "),a("h2",{attrs:{id:"feasibility-of-implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#feasibility-of-implementation"}},[e._v("#")]),e._v(" Feasibility of implementation")]),e._v(" "),a("p",[e._v("This section outlines the various hurdles that would exist to implementing BLS\nsignature aggregation into Tendermint. It aims to demonstrate that we "),a("em",[e._v("could")]),e._v("\nimplement BLS signatures but that it would incur risk and require breaking changes for a\nreasonably unclear benefit.")]),e._v(" "),a("h3",{attrs:{id:"can-aggregated-signatures-be-added-as-soft-upgrades"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#can-aggregated-signatures-be-added-as-soft-upgrades"}},[e._v("#")]),e._v(" Can aggregated signatures be added as soft-upgrades?")]),e._v(" "),a("p",[e._v("In my estimation, yes. With the implementation of proposer-based timestamps,\nall validators now produce signatures on only one of two messages:")]),e._v(" "),a("ol",[a("li",[e._v("A "),a("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/be7cb50bb3432ee652f88a443e8ee7b8ef7122bc/spec/core/encoding.md#L283",target:"_blank",rel:"noopener noreferrer"}},[e._v("CanonicalVote"),a("OutboundLink")],1),e._v(" where the BlockID is the hash of the block or")]),e._v(" "),a("li",[e._v("A "),a("code",[e._v("CanonicalVote")]),e._v(" where the "),a("code",[e._v("BlockID")]),e._v(" is nil.")])]),e._v(" "),a("p",[e._v("The block structure can be updated to perform hashing and validation in a new\nway as a soft upgrade. This would look like adding a new section to the "),a("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/be7cb50bb3432ee652f88a443e8ee7b8ef7122bc/proto/tendermint/types/types.proto#L121",target:"_blank",rel:"noopener noreferrer"}},[e._v("Block.Commit"),a("OutboundLink")],1),e._v(" structure\nalongside the current "),a("code",[e._v("Commit.Signatures")]),e._v(" field. This new field, tentatively named\n"),a("code",[e._v("AggregatedSignature")]),e._v(" would contain the following structure:")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"proto",base64:"bWVzc2FnZSBBZ2dyZWdhdGVkU2lnbmF0dXJlIHsKICAvLyB5ZWFzIGlzIGEgQml0QXJyYXkgcmVwcmVzZW50aW5nIHdoaWNoIHZhbGlkYXRvcnMgaW4gdGhlIGFjdGl2ZSB2YWxpZGF0b3IKICAvLyBzZXQgaXNzdWVkIGEgJ3llYScgdm90ZSBmb3IgdGhlIGJsb2NrLgogIHRlbmRlcm1pbnQubGlicy5iaXRzLkJpdEFycmF5IHllYXMgPSAxOwoKICAvLyBhYnNlbnQgaXMgYSBCaXRBcnJheSByZXByZXNlbnRpbmcgd2hpY2ggdmFsaWRhdG9ycyBpbiB0aGUgYWN0aXZlCiAgLy8gdmFsaWRhdG9yIHNldCBkaWQgbm90IGlzc3VlIHZvdGVzIGZvciB0aGUgYmxvY2suCiAgdGVuZGVybWludC5saWJzLmJpdHMuQml0QXJyYXkgYWJzZW50ID0gMjsKCiAgLy8geWVhX3NpZ25hdHVyZSBpcyBhbiBhZ2dyZWdhdGVkIHNpZ25hdHVyZSBwcm9kdWNlZCBmcm9tIGFsbCBvZiB0aGUgdm90ZQogIC8vIHNpZ25hdHVyZXMgZm9yIHRoZSBibG9jay4KICByZXBlYXRlZCBieXRlcyB5ZWFfc2lnbmF0dXJlID0gMzsKCiAgLy8gbmF5X3NpZ25hdHVyZSBpcyBhbiBhZ2dyZWdhdGVkIHNpZ25hdHVyZSBwcm9kdWNlZCBmcm9tIGFsbCBvZiB0aGUgdm90ZQogIC8vIHNpZ25hdHVyZXMgZnJvbSB2b3RlcyBmb3IgJ25pbCcgZm9yIHRoaXMgYmxvY2suCiAgLy8gbmF5X3NpZ25hdHVyZSBzaG91bGQgYmUgbWFkZSBmcm9tIGFsbCBvZiB0aGUgdmFsaWRhdG9ycyB0aGF0IHdlcmUgYm90aCBub3QKICAvLyBpbiB0aGUgJ3llYXMnIEJpdEFycmF5IGFuZCBub3QgaW4gdGhlICdhYnNlbnQnIEJpdEFycmF5LgogIHJlcGVhdGVkIGJ5dGVzIG5heV9zaWduYXR1cmUgPSA0Owp9Cg=="}}),e._v(" "),a("p",[e._v("Adding this new field as a soft upgrade would mean hashing this data structure\ninto the blockID along with the old "),a("code",[e._v("Commit.Signatures")]),e._v(" when both are present\nas well as ensuring that the voting power represented in the new\n"),a("code",[e._v("AggregatedSignature")]),e._v(" and "),a("code",[e._v("Signatures")]),e._v(" field was enough to commit the block\nduring block validation. One can certainly imagine other possible schemes for\nimplementing this but the above should serve as a simple enough proof of concept.")]),e._v(" "),a("h3",{attrs:{id:"implementing-vote-time-and-commit-time-signature-aggregation-separately"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementing-vote-time-and-commit-time-signature-aggregation-separately"}},[e._v("#")]),e._v(" Implementing vote-time and commit-time signature aggregation separately")]),e._v(" "),a("p",[e._v("Implementing aggregated BLS signatures as part of the block structure can easily be\nachieved without implementing any 'vote-time' signature aggregation.\nThe block proposer would gather all of the votes, complete with signatures,\nas it does now, and produce a set of aggregate signatures from all of the\nindividual vote signatures.")]),e._v(" "),a("p",[e._v("Implementing 'vote-time' signature aggregation cannot be achieved without\nalso implementing commit-time signature aggregation. This is because such\nsignatures cannot be dis-aggregated into their constituent pieces. Therefore,\nin order to implement 'vote-time' signature aggregation, we would need to\neither first implement 'commit-time' signature aggregation, or implement both\n'vote-time' signature aggregation while also updating the block creation and\nverification protocols to allow for aggregated signatures.")]),e._v(" "),a("h3",{attrs:{id:"updating-ibc-clients"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#updating-ibc-clients"}},[e._v("#")]),e._v(" Updating IBC clients")]),e._v(" "),a("p",[e._v("In order for IBC clients to function, they must be able to perform light-client\nverification of blocks on counterparty chains. Because BLS signatures are not\ncurrently part of light-clients, chains that transmit messages over IBC\ncannot update to using BLS signatures without their counterparties first\nbeing upgraded to parse and verify BLS. If chains upgrade without their\ncounterparties first updating, they will lose the ability to interoperate with\nnon-updated chains.")]),e._v(" "),a("h3",{attrs:{id:"new-attack-surfaces"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-attack-surfaces"}},[e._v("#")]),e._v(" New attack surfaces")]),e._v(" "),a("p",[e._v("BLS signatures and signature aggregation comes with a new set of attack surfaces.\nAdditionally, it's not clear that all possible major attacks are currently known\non the BLS aggregation schemes since new ones have been discovered since the ietf\ndraft standard was written. The known attacks are manageable and are listed below.\nOur implementation would need to prevent against these but this does not appear\nto present a significant hurdle to implementation.")]),e._v(" "),a("h4",{attrs:{id:"rogue-key-attack-prevention"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rogue-key-attack-prevention"}},[e._v("#")]),e._v(" Rogue key attack prevention")]),e._v(" "),a("p",[e._v("Generating an aggregated signature requires guarding against what is called\na "),a("a",{attrs:{href:"https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-bls-signature-04#section-1.3",target:"_blank",rel:"noopener noreferrer"}},[e._v("rogue key attack"),a("OutboundLink")],1),e._v(". A rogue key attack is one in which a\nmalicious actor can craft an "),a("em",[e._v("aggregate")]),e._v(" key that can produce signatures that\nappear to include a signature from a private key that the malicious actor\ndoes not actually know. In Tendermint terms, this would look like a Validator\nproducing a vote signed by both itself and some other validator where the other\nvalidator did not actually produce the vote itself.")]),e._v(" "),a("p",[e._v("The main mechanisms for preventing this require that each entity prove that it\ncan can sign data with just their private key. The options involve either\nensuring that each entity sign a "),a("em",[e._v("different")]),e._v(" message when producing every\nsignature "),a("em",[e._v("or")]),e._v(" producing a "),a("a",{attrs:{href:"https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-bls-signature-04#section-3.3",target:"_blank",rel:"noopener noreferrer"}},[e._v("proof of possession"),a("OutboundLink")],1),e._v(" (PoP) when announcing\ntheir key to the network.")]),e._v(" "),a("p",[e._v("A PoP is a message that demonstrates ownership of a private\nkey. A simple scheme for PoP is one where the entity announcing\nits new public key to the network includes a digital signature over the bytes\nof the public key generated using the associated private key. Everyone receiving\nthe public key and associated proof-of-possession can easily verify the\nsignature and be sure the entity owns the private key.")]),e._v(" "),a("p",[e._v("This PoP scheme suits the Tendermint use case quite well since\nvalidator keys change infrequently so the associated PoPs would not be onerous\nto produce, verify, and store. Using this scheme allows signature verification\nto proceed more quickly, since all signatures are over identical data and\ncan therefore be checked using an aggregated public key instead of one at a\ntime, public key by public key.")]),e._v(" "),a("h4",{attrs:{id:"summing-zero-attacks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summing-zero-attacks"}},[e._v("#")]),e._v(" Summing Zero Attacks")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://eprint.iacr.org/2021/323.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Summing zero attacks"),a("OutboundLink")],1),e._v(" are attacks that rely on using the '0' point of an\nelliptic curve. For BLS signatures, if the point 0 is chosen as the private\nkey, then the 0 point will also always be the public key and all signatures\nproduced by the key will also be the 0 point. This is easy enough to\ndetect when verifying each signature individually.")]),e._v(" "),a("p",[e._v('However, because BLS signature aggregation creates an aggregated signature and\nan aggregated public key, a set of colluding signers can create a pair or set\nof signatures that are non-zero but which aggregate ("sum") to 0. The signatures that sum zero along with the\nsummed public key of the colluding signers will verify any message. This would\nallow the colluding signers to sign any block or message with the same signature.\nThis would be reasonably easy to detect and create evidence for because, in\nall other cases, the same signature should not verify more than message. It\'s\nnot exactly clear how such an attack would advantage the colluding validators\nbecause the normal mechanisms of evidence gathering would still detect the\ndouble signing, regardless of the signatures on both blocks being identical.')]),e._v(" "),a("h3",{attrs:{id:"backwards-compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility"}},[e._v("#")]),e._v(" Backwards Compatibility")]),e._v(" "),a("p",[e._v("Backwards compatibility is an important consideration for signature verification.\nSpecifically, it is important to consider whether chains using current versions\nof IBC would be able to interact with chains adopting BLS.")]),e._v(" "),a("p",[e._v("Because the "),a("code",[e._v("Block")]),e._v(" shared by IBC and Tendermint is produced and parsed using\nprotobuf, new structures can be added to the Block without breaking the\nability of legacy users to parse the new structure. Breaking changes between\ncurrent users of IBC and new Tendermint blocks only occur if data that is\nrelied upon by the current users is no longer included in the current fields.")]),e._v(" "),a("p",[e._v("For the case of BLS aggregated signatures, a new "),a("code",[e._v("AggregatedSignature")]),e._v(" field\ncan therefore be added to the "),a("code",[e._v("Commit")]),e._v(" field without breaking current users.\nCurrent users will be broken when counterparty chains upgrade to the new version\nand "),a("em",[e._v("begin using")]),e._v(" BLS signatures. Once counterparty chains begin using BLS\nsignatures, the BlockID hashes will include hashes of the "),a("code",[e._v("AggregatedSignature")]),e._v("\ndata structure that the legacy users will not be able to compute. Additionally,\nthe legacy software will not be able to parse and verify the signatures to\nensure that a supermajority of validators from the counterparty chain signed\nthe block.")]),e._v(" "),a("h3",{attrs:{id:"library-support"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#library-support"}},[e._v("#")]),e._v(" Library Support")]),e._v(" "),a("p",[e._v("Libraries for BLS signature creation are limited in number, although active\ndevelopment appears to be ongoing. Cryptographic algorithms are difficult to\nimplement correctly and correctness issues are extremely serious and dangerous.\nNo further exploration of BLS should be undertaken without strong assurance of\na well-tested library with continuing support for creating and verifying BLS\nsignatures.")]),e._v(" "),a("p",[e._v("At the moment, there is one candidate, "),a("code",[e._v("blst")]),e._v(", that appears to be the most\nmature and well vetted. While this library is undergoing continuing auditing\nand is supported by funds from the Ethereum foundation, adopting a new cryptographic\nlibrary presents some serious risks. Namely, if the support for the library were\nto be discontinued, Tendermint may become saddled with the requirement of supporting\na very complex piece of software or force a massive ecosystem-wide migration away\nfrom BLS signatures.")]),e._v(" "),a("p",[e._v("This is one of the more serious reasons to avoid adopting BLS signatures at this\ntime. There is no gold standard library. Some projects look promising, but no\nproject has been formally verified with a long term promise of being supported\nwell into the future.")]),e._v(" "),a("h4",{attrs:{id:"go-standard-library"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go-standard-library"}},[e._v("#")]),e._v(" Go Standard Library")]),e._v(" "),a("p",[e._v("The Go Standard library has no implementation of BLS signatures.")]),e._v(" "),a("h4",{attrs:{id:"blst"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blst"}},[e._v("#")]),e._v(" BLST")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/supranational/blst",target:"_blank",rel:"noopener noreferrer"}},[e._v("blst"),a("OutboundLink")],1),e._v(", or 'blast' is an implementation of BLS signatures written in C\nthat provides bindings into Go as part of the repository. This library is\nactively undergoing formal verification by Galois and previously received an\ninitial audit by NCC group, a firm I'd never heard of.")]),e._v(" "),a("p",[a("code",[e._v("blst")]),e._v(" is "),a("a",{attrs:{href:"https://github.com/prysmaticlabs/prysm/blob/develop/go.mod#L75",target:"_blank",rel:"noopener noreferrer"}},[e._v("targeted for use in prysm"),a("OutboundLink")],1),e._v(", the golang implementation of Ethereum 2.0.")]),e._v(" "),a("h4",{attrs:{id:"gnark-crypto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gnark-crypto"}},[e._v("#")]),e._v(" Gnark-Crypto")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/ConsenSys/gnark-crypto/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gnark-Crypto"),a("OutboundLink")],1),e._v(" is a Go-native implementation of elliptic-curve pairing-based\ncryptography. It is not audited and is documented as 'as-is', although\ndevelopment appears to be active so formal verification may be forthcoming.")]),e._v(" "),a("h4",{attrs:{id:"circl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#circl"}},[e._v("#")]),e._v(" CIRCL")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/cloudflare/circl",target:"_blank",rel:"noopener noreferrer"}},[e._v("CIRCL"),a("OutboundLink")],1),e._v(" is a go-native implementation of several cryptographic primitives,\nbls12-381 among them. The library is written and maintained by Cloudflare and\nappears to receive frequent contributions. However, it lists itself as experimental\nand urges users to take caution before using it in production.")]),e._v(" "),a("h3",{attrs:{id:"added-complexity-to-light-client-verification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#added-complexity-to-light-client-verification"}},[e._v("#")]),e._v(" Added complexity to light client verification")]),e._v(" "),a("p",[e._v("Implementing BLS signature aggregation in Tendermint would pose issues for the\nlight client. The light client currently validates a subset of the signatures\non a block when performing the verification algorithm. This is no longer possible\nwith an aggregated signature. Aggregated signature verification is all-or-nothing.\nThe light client could no longer check that a subset of validators from some\nset of validators is represented in the signature. Instead, it would need to create\na new aggregated key with all the stated signers for each height it verified where\nthe validator set changed.")]),e._v(" "),a("p",[e._v("This means that the speed advantages gained by using BLS cannot be fully realized\nby the light client since the client needs to perform the expensive operation\nof re-aggregating the public key. Aggregation is "),a("em",[e._v("not")]),e._v(" constant time in the\nnumber of keys and instead grows linearly. When "),a("a",{attrs:{href:"https://github.com/williambanfield/blst/blame/bench/bindings/go/PERFORMANCE.md#L23",target:"_blank",rel:"noopener noreferrer"}},[e._v("benchmarked locally"),a("OutboundLink")],1),e._v(",\nblst public key aggregation of 128 keys took 2.43 milliseconds. This, along with\nthe 1.5 milliseconds to verify a signature would raise light client signature\nverification time to 3.9 milliseconds, a time above the previously mentioned\nbatch verification time using our ed25519 library of 2.0 milliseconds.")]),e._v(" "),a("p",[e._v("Schemes to cache aggregated subsets of keys could certainly cut this time down at the\ncost of adding complexity to the light client.")]),e._v(" "),a("h3",{attrs:{id:"added-complexity-to-evidence-handling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#added-complexity-to-evidence-handling"}},[e._v("#")]),e._v(" Added complexity to evidence handling")]),e._v(" "),a("p",[e._v("Implementing BLS signature aggregation in Tendermint would add complexity to\nthe evidence handling within Tendermint. Currently, the light client can submit\nevidence of a fork attempt to the chain. This evidence consists of the set of\nvalidators that double-signed, including their public keys, with the conflicting\nblock.")]),e._v(" "),a("p",[e._v("We can quickly check that the listed validators double signed by verifying\nthat each of their signatures are in the submitted conflicting block. A BLS\nsignature scheme would change this by requiring the light client to submit\nthe public keys of all of the validators that signed the conflicting block so\nthat the aggregated signature may be checked against the full signature set.\nAgain, aggregated signature verification is all-or-nothing, so without all of\nthe public keys, we cannot verify the signature at all. These keys would be\nretrievable. Any party that wanted to create a fork would want to convince a\nnetwork that its fork is legitimate, so it would need to gossip the public keys.\nThis does not hamper the feasibility of implementing BLS signature aggregation\ninto Tendermint, but does represent yet another piece of added complexity to\nthe associated protocols.")]),e._v(" "),a("h2",{attrs:{id:"open-questions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#open-questions"}},[e._v("#")]),e._v(" Open Questions")]),e._v(" "),a("ul",[a("li",[a("em",[e._v("Q")]),e._v(": Can you aggregate Ed25519 signatures in Tendermint?\n"),a("ul",[a("li",[e._v("There is a suggested scheme in github issue "),a("a",{attrs:{href:"https://github.com/tendermint/tendermint/issues/7892",target:"_blank",rel:"noopener noreferrer"}},[e._v("7892"),a("OutboundLink")],1),e._v(",\nbut additional rigor would be required to fully verify its correctness.")])])])]),e._v(" "),a("h2",{attrs:{id:"current-consideration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#current-consideration"}},[e._v("#")]),e._v(" Current Consideration")]),e._v(" "),a("p",[e._v("Adopting a signature aggregation scheme presents some serious risks and costs\nto the Tendermint project. It requires multiple backwards-incompatible changes\nto the code, namely a change in the structure of the block and a new backwards-incompatible\nsignature and key type. It risks adding a new signature type for which new attack\ntypes are still being discovered "),a("em",[e._v("and")]),e._v(" for which no industry standard, battle-tested\nlibrary yet exists.")]),e._v(" "),a("p",[e._v("The gains boasted by this new signing scheme are modest: Verification time is\nmarginally faster and block sizes shrink by a few kilobytes. These are relatively\nminor gains in exchange for the complexity of the change and the listed risks of the technology.\nWe should take a wait-and-see approach to BLS signature aggregation, monitoring\nthe up-and-coming projects and consider implementing it as the libraries and\nstandards develop.")]),e._v(" "),a("h3",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")])],1)}),[],!1,null,null,null);t.default=i.exports}}]);